directive @isAuthenticated on FIELD_DEFINITION | QUERY

type School {
	uuid: ID!
	name: String!
	lengthInWeeks: Int
	isOnline: Boolean
	basePrice: Int
	paymentType: String # e.g. ISA, Upfront
	photoURI: String
	#countries available
	campusLocations: [CampusLocation!]
}

type SchoolQueryResult {
	totalNumResults: Int! # How many total results are there (regardless of page #)
	pageNumber: Int!
	schoolResults: [School!]!
}

type City {
	uuid: ID!
	name: String!
}

type Country {
	uuid: ID!
	name: String!
}

type Location {
	uuid: ID!
	city: City!
	country: Country!
}

type CampusLocation {
	location: Location!
	medianGraduateSalary: Float
	jobPlacementRate: Float
}

type Student {
	uuid: ID!
	firstName: String!
	lastName: String!
	photoURI: String
	linkedInPhotoURL: String
	school: School
}

input CreateStudentInput {
	uuid: ID!
	firstName: String!
	lastName: String!
	email: String!
	linkedInPhotoURL: String!
}
input UpdateStudentInput {
	uuid: ID!
	firstName: String
	lastName: String
	email: String
	linkedInURL: String
	schoolUUID: ID
}

input SchoolSearchParams {
	pageNumber: Int! # each page has 10 elements
	searchText: String
	locationUUID: ID
	paymentType: String
	maxPrice: Int
	minGraduateSalary: Float
	minJobPlacementRate: Float
	minLength: Int
}

type Filters {
	locations: [Location!]!
	paymentTypes: [String!]!
	minLengths: [Int!]!
	maxPrices: [Int!]!
}

type Review {
	uuid: ID!
	title: String!
	allText: String!
	teachingScore: Int!
	courseworkScore: Int!
	atmosphereScore: Int!
	careerPreparationScore: Int!
	overallScore: Int!
	helpfulUpvotes: Int!
	helpfulDownvotes: Int!
	hasJob: Boolean!
	salaryBefore: Int
	salaryAfter: Int
	school: School!
	schoolLocation: Location!
	schoolGraduationTimestamp: Int
	jobLocation: Location
	jobStartTimestamp: Int
	createdTimestamp: Int!
}

input NewReviewParams {
	# school
	studentUUID: ID!
	title: String!
	allText: String!
	overallScore: Int!
	teachingScore: Int!
	courseworkScore: Int!
	atmosphereScore: Int!
	careerPreparationScore: Int!
	schoolUUID: ID!
	schoolLocationUUID: ID!
	didGraduate: Boolean!
	schoolGraduationMonth: Int
	schoolGraduationYear: Int
	
	# job
	hasJob: Boolean!
	salaryBefore: Int
	salaryAfter: Int
	jobLocationUUID: ID
	jobLocationOtherName: String # if location isn't in given options
	jobStartMonth: Int
	jobStartYear: Int
}

type Query {
	school(uuid: ID!): School
	schools(params: SchoolSearchParams!): SchoolQueryResult!
	filters: Filters

	student(uuid: ID!): Student @isAuthenticated

	reviews(schoolUUID: ID!, offset: Int!): [Review!]!
}

type Mutation {
	createStudent(studentInfo: CreateStudentInput!): Boolean! @isAuthenticated
	updateStudent(studentInfo: UpdateStudentInput!): Boolean! @isAuthenticated

	submitReview(reviewParams: NewReviewParams!): Boolean! @isAuthenticated
}
