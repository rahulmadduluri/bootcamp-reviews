type School {
	uuid: ID!
	name: String!
	lengthInWeeks: Int
	isOnline: Boolean
	basePrice: Int
	paymentType: String # e.g. ISA, Upfront
	photoURI: String
	#countries available
	campusLocations: [CampusLocation!]
}

type SchoolQueryResult {
	totalNumResults: Int! # How many total results are there (regardless of page #)
	pageNumber: Int!
	schoolResults: [School!]!
}

type Location {
	uuid: ID!
	city: String
	country: String!
}

type CampusLocation {
	location: Location!
	avgGraduateSalary: Float
	jobPlacementRate: Float
}


input SchoolSearchParams {
	pageNumber: Int! # each page has 10 elements
	searchText: String
	locationUUID: ID
	paymentType: String
	maxPrice: Int
	minGraduateSalary: Float
	minJobPlacementRate: Float
	minLength: Int
}

type Filters {
	locations: [Location!]!
	paymentTypes: [String!]!
}

type Query {
	school(uuid: ID!): School
	schools(params: SchoolSearchParams!): SchoolQueryResult!
	filters: Filters
}
